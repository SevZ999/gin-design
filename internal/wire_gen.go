// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"context"
	"fmt"
	"gin-design/internal/app/controller"
	"gin-design/internal/app/data"
	"gin-design/internal/app/repo"
	"gin-design/internal/app/router"
	"gin-design/internal/app/service"
	"gin-design/internal/config"
	"gin-design/internal/db"
	"gin-design/internal/pkg/logger"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

import (
	_ "gin-design/docs"
)

// Injectors from wire.go:

func InitApp(mode string) (*App, func(), error) {
	configConfig, err := config.LoadConfig(mode)
	if err != nil {
		return nil, nil, err
	}
	zapLogger, err := logger.NewZapLogger(configConfig)
	if err != nil {
		return nil, nil, err
	}
	gormDB, cleanup, err := db.NewGormDB(configConfig, zapLogger)
	if err != nil {
		return nil, nil, err
	}
	dataData := data.NewData(gormDB)
	userRepo := repo.NewUserRepo(dataData)
	userService := service.NewUserService(userRepo, zapLogger)
	userController := controller.NewUserController(userService)
	userRouter := router.NewUserRouter(userController)
	shopRepo := repo.NewShopRepo(dataData)
	shopService := service.NewShopService(shopRepo, zapLogger)
	shopController := controller.NewShopController(shopService)
	shopRouter := router.NewShopRouter(shopController)
	v := router.NewRouters(userRouter, shopRouter)
	engine := NewEngine(configConfig, zapLogger, v)
	app := NewApp(configConfig, engine, zapLogger)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

type App struct {
	srv    *http.Server
	logger *logger.ZapLogger
}

func NewApp(cfg *config.Config, handler *gin.Engine, logger2 *logger.ZapLogger) *App {
	return &App{
		srv: &http.Server{
			Handler: handler,
			Addr:    fmt.Sprint("0.0.0.0:", cfg.HTTP.Port),
		},
		logger: logger2,
	}
}

func (a *App) Run() {
	go func() {
		msg := fmt.Sprintf("server started: %s", a.srv.Addr)
		a.logger.Info(context.Background(), msg)
		if err := a.srv.ListenAndServe(); err != nil {

			if err != http.ErrServerClosed {
				log.Fatalf("服务器意外关闭或启动失败: %v", err)
			}

		}
	}()

	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGTERM, os.Interrupt)
	<-quit

	a.logger.Info(context.Background(), "shutting down server...")
	ctx, cancel := context.WithTimeout(context.Background(), 50*time.Second)
	defer cancel()

	if err := a.srv.Shutdown(ctx); err != nil {
		log.Fatalf("server close error: %v", err)
	}
	log.Println("server stopped")
}
