// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	"loan-admin/internal/app/controller"
	"loan-admin/internal/app/repo"
	"loan-admin/internal/app/router"
	"loan-admin/internal/app/service"
	"loan-admin/internal/config"
	"loan-admin/internal/db"
	"loan-admin/internal/pkg/logger"
)

// Injectors from wire.go:

func InitApp(mode string) (*App, error) {
	configConfig, err := config.LoadConfig(mode)
	if err != nil {
		return nil, err
	}
	loggerLogger, err := logger.NewZapLogger(configConfig)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewGormDB(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	userRepo := repo.NewUserRepo(gormDB)
	userService := service.NewUserService(userRepo)
	userController := controller.NewUserController(userService)
	userRouter := router.NewUserRouter(userController)
	acessRepo := repo.NewAccessRepo(gormDB)
	accessService := service.NewAccessService(acessRepo)
	accessController := controller.NewAccessController(accessService)
	accessRouter := router.NewAccessRouter(accessController)
	v := router.NewRouters(userRouter, accessRouter)
	app := NewApp(v)
	return app, nil
}

// wire.go:

type App struct {
	Engine  *gin.Engine
	routers []router.Router
}

func NewApp(routers []router.Router) *App {
	return &App{
		Engine:  gin.Default(),
		routers: routers,
	}
}

func (a *App) Run() {

	api := a.Engine.Group("api")

	a.SetRoute(api)

	a.Engine.GET("/health", func(ctx *gin.Context) {
		ctx.JSON(200, gin.H{
			"message": "pong",
		})
	})
	pprof.Register(a.Engine, "/api/pprof")

	a.Engine.Run(":9001")
}

func (a *App) SetRoute(api *gin.RouterGroup) {
	for _, r := range a.routers {
		r.SetRoute(api)
	}
}
